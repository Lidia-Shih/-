那我提供一段程式給你，希望你可以幫我完善這個程式碼，使其可以把每一個串列計算長度加總並列印，程式碼如下：
#include <stdio.h>
#include <stdlib.h>
#define N 6

void list_x(void);
void list_y(void);
void list_z(void);
void c(struct node *f_x, struct node *r_x,
		 struct node *f_y, struct node *r_y,
		 struct node *f_z, struct node *r_z);
void print(struct node *f_);
void length(struct node *f_);
 
struct node{
   int data;
   struct node *link;
};
struct node *f_1, *r_1;
struct node *f_2, *r_2;
struct node *f_3, *r_3;

void list_1(void)
{
   f_1 = (struct node *) malloc(sizeof(struct node));
   r_1 = (struct node *) malloc(sizeof(struct node));
   f_1->link = NULL;
   r_1->link = NULL;
}

void list_2(void)
{
   f_2 = (struct node *) malloc(sizeof(struct node));
   r_2 = (struct node *) malloc(sizeof(struct node));
   f_2->link = NULL;
   r_2->link = NULL;
}

void list_3(void)
{
   f_3 = (struct node *) malloc(sizeof(struct node));
   r_3 = (struct node *) malloc(sizeof(struct node));
   f_3->link = NULL;
   r_3->link = NULL;
}

void insert(int key, struct node *f_, struct node *r_)
{
   struct node *new_node, *temp_node;

   new_node = (struct node *) malloc(sizeof(struct node));

   new_node->data = key;
   new_node->link = NULL;

   if (f_->link == NULL)
      {
        f_->link = new_node;
        r_->link = new_node;
      } 
   else
      {
        temp_node = r_->link;
        temp_node->link = new_node;
        r_->link = new_node;
      }
}

void c(struct node *f_x, struct node *r_x,
		 struct node *f_y, struct node *r_y,
		 struct node *f_z, struct node *r_z)
{
   struct node *this_node;

   if (f_x->link == NULL)
      { 
        f_z->link = f_y->link;
        r_z->link = r_y->link;
      }
   else {
        if (f_y->link == NULL) {
             f_z->link = f_x->link;
             r_z->link = r_x->link;
           }
      else{
             f_z->link = f_x->link;
             this_node = r_x->link;
             this_node->link = f_y->link;
             r_z->link = r_y->link;
           }
      } 
}

void print(struct node *f_) {
   struct node *this_node;

   if (f_->link != NULL) {
        this_node = f_->link;
        printf("串列內容為：");

        while(this_node->link != NULL) {
            printf("%d ->",this_node->data);
            this_node = this_node->link;
          }
        printf("%d \n",this_node->data);
     }
   else
        printf("空串列\n");
}

void length(struct node *f_) {
   int count = 0;
   struct node *this_node;

   if (f_->link != NULL) {
        this_node = f_->link;
        while(this_node->link != NULL) {
               count ++;
               this_node = this_node->link;
             }
        count ++;
        printf("串列長度：%d\n",count);
      }
   else
        printf("空串列，串列長度為 0\n");
}

int main(void) {
   int i;
   int a[N] = {0, 1, 2, 3, 4, 5};
   int b[N] = {10, 11, 12, 13, 14, 15};

   list_1( );
   list_2( );
   list_3( );

//   clrscr();
   for(i = 0; i < N; i++)
      {
        insert(a[i], f_1, r_1);
      }
   printf("串列 1：\n");
   print(f_1);
   length(f_1);

   for(i = 0; i < N; i++) {
        insert(b[i], f_2, r_2);
      }
   printf("串列 2：\n");
   print(f_2);
   length(f_2);

   printf("串列 3：\n");
   print(f_3);
   length(f_3);

   c(f_1, r_1, f_2, r_2, f_3, r_3);
   printf("合併後：\n");
   print(f_3);
   length(f_3);
   
   return 0;
}
